{"version":3,"sources":["assets/watermelon_04.png","apis/youtube.js","contexts/MusicContext.js","apis/genius.js","components/useMelon.js","components/Header.js","components/PlaylistHeaders.js","components/YouTubePlayer.js","components/PlaylistItem.js","components/CurrentPlaylist.js","components/NowPlaying.js","components/Footer.js","components/spinner.js","components/Playlist.js","components/App.js","index.js"],"names":["module","exports","axios","create","baseURL","Context","React","createContext","MusicProvider","props","useState","genre","path","id","text","tracks","customPlaylist","playlistTracks","currentSong","watchingPlaylist","state","setState","isLoading","setIsLoading","fetchPlaylist","a","config","headers","res","window","screen","width","getTracks","data","fetchYoutube","artist","title","youtube","get","params","q","part","maxResults","key","videoId","items","div","document","createElement","innerHTML","rankAr","querySelectorAll","titleAr","artistAr","artAr","currentGenre","forEach","ranking","index","rank","textContent","art","style","backgroundImage","replace","console","log","currentTrack","album","YouTubeId","availableAction","trackGenre","trackIndex","handleCurrentSong","push","albumAr","keyAr","src","getAttribute","track","action","includes","filter","item","useEffect","Provider","value","children","useMelon","useContext","fetchGenrePlaylist","currentId","i","ytLink","open","focus","length","getLyrics","genius","cx","results","lyricLink","link","clearPlaylist","playlist","viewPlaylist","getGenre","MemoizedHeader","memo","className","Logo","alt","map","header","onClick","PlaylistHeaders","YouTubePlayer","url","youtubeID","type","height","allowFullScreen","PlaylistItem","display","CurrentPlaylist","renderedList","_","toArray","renderCurrentPlaylist","MemoizedNowPlaying","renderInstantPlaylistButton","size","renderPlayistButtons","renderHelper","Footer","buttonHelper","spinner","MemoizedPlaylist","currentList","playlistRendor","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.02e2441b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/watermelon_04.17098dbf.png\";","import axios from \"axios\";\r\n     \r\nexport default axios.create({\r\n  baseURL: \"https://www.googleapis.com/youtube/v3\"\r\n});\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport axios from \"axios\";\r\nimport youtube from \"../apis/youtube\";\r\n\r\nconst Context = React.createContext([{}, () => {}]);\r\n\r\nexport const MusicProvider = (props) => {\r\n  const [state, setState] = useState({\r\n    genre: { path: \"DM0000\", id: \"top100\", text: \"Top 100\" },\r\n    tracks: {},\r\n    customPlaylist: [],\r\n    playlistTracks: [],\r\n    currentSong: {},\r\n    watchingPlaylist: false,\r\n  });\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Fetch songs via Melon based on selected genre\r\n  const fetchPlaylist = async ({ id, path }) => {\r\n    if (!state.tracks[id] && !isLoading) {\r\n      let config = {\r\n        headers: {\r\n          \"Access-Control-Expose-Headers\": \"User-Agent\",\r\n          \"User-Agent\":\r\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0\",\r\n        },\r\n      };\r\n\r\n      let res = \"\";\r\n      if (window.screen.width < 767) {\r\n        res = await axios(\r\n          `https://cors-anywhere.herokuapp.com/https://m2.melon.com/cds/main/mobile4web/main_chart.htm\r\n          `,\r\n          config\r\n        );\r\n\r\n        getTracks(res.data);\r\n      } else {\r\n        res = await axios(\r\n          `https://cors-anywhere.herokuapp.com/https://www.melon.com/chart/day/index.htm?classCd=${path}`,\r\n          config\r\n        );\r\n        getTracks(res.data);\r\n      }\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  // Fetch Youtube Video ID for selected song\r\n  const fetchYoutube = async (artist, title) => {\r\n    var KEY = \"AIzaSyDJG4uwhqh0A4gCLmgQuDhyJM7DK57dbDk\";\r\n\r\n    const res = await youtube.get(\"/search\", {\r\n      params: {\r\n        q: `${artist} ${title}`,\r\n        part: \"snippet\",\r\n        maxResults: 1,\r\n        key: KEY,\r\n      },\r\n    });\r\n\r\n    const videoId = res.data.items[0].id.videoId;\r\n    return videoId;\r\n  };\r\n\r\n  // Update songs stored in context\r\n  const getTracks = (res) => {\r\n    let div = document.createElement(\"div\");\r\n\r\n    div.innerHTML = res;\r\n\r\n    if (window.screen.width < 767) {\r\n      let rankAr = div.querySelectorAll(\"strong.rank\");\r\n      let titleAr = div.querySelectorAll(\".title\");\r\n      let artistAr = div.querySelectorAll(\".name\");\r\n      let artAr = div.querySelectorAll(\".inner>span\");\r\n      let currentGenre = [];\r\n\r\n      rankAr.forEach(function (ranking, index) {\r\n        let rank = ranking.textContent;\r\n        let title = titleAr[index].textContent;\r\n        let artist = artistAr[index].textContent;\r\n        let album = \"\";\r\n        let art = artAr[index].style.backgroundImage;\r\n        art = art.replace('url(\"//', \"https:\");\r\n        art = art.replace('\")', \"\");\r\n\r\n        console.log(art);\r\n\r\n        let YouTubeId = \"\";\r\n        let key = ranking.textContent;\r\n        let availableAction = \"add\";\r\n        let trackGenre = state.genre.id;\r\n        let trackIndex = index;\r\n\r\n        let currentTrack = {\r\n          rank,\r\n          title,\r\n          artist,\r\n          album,\r\n          art,\r\n          YouTubeId,\r\n          key,\r\n          availableAction,\r\n          trackGenre,\r\n          trackIndex,\r\n        };\r\n\r\n        // defaults on initial load to #1 song\r\n        if (typeof state.currentSong.title === \"undefined\" && index === 0) {\r\n          handleCurrentSong(currentTrack, index, \"play\");\r\n        }\r\n\r\n        currentGenre.push(currentTrack);\r\n      });\r\n\r\n      let tracks = { ...state.tracks, [state.genre.id]: currentGenre };\r\n      setState((state) => ({ ...state, tracks }));\r\n    } else {\r\n      let rankAr = div.querySelectorAll(\"#lst50 .rank, #lst100 .rank\");\r\n      let titleAr = div.querySelectorAll(\".rank01>span>a\");\r\n      let artistAr = div.querySelectorAll(\".rank02>span>a\");\r\n      let albumAr = div.querySelectorAll(\".rank03>a\");\r\n      let artAr = div.querySelectorAll(\".image_typeAll>img\");\r\n      let keyAr = div.querySelectorAll(\"tr[data-song-no]\");\r\n\r\n      let currentGenre = [];\r\n\r\n      rankAr.forEach(function (ranking, index) {\r\n        let rank = ranking.textContent;\r\n        let title = titleAr[index].textContent;\r\n        let artist = artistAr[index].textContent;\r\n        let album = albumAr[index].textContent;\r\n        let art = artAr[index].src;\r\n        let YouTubeId = \"\";\r\n        let key = keyAr[index].getAttribute(\"data-song-no\");\r\n        let availableAction = \"add\";\r\n        let trackGenre = state.genre.id;\r\n        let trackIndex = index;\r\n\r\n        console.log(art);\r\n\r\n        let currentTrack = {\r\n          rank,\r\n          title,\r\n          artist,\r\n          album,\r\n          art,\r\n          YouTubeId,\r\n          key,\r\n          availableAction,\r\n          trackGenre,\r\n          trackIndex,\r\n        };\r\n\r\n        // defaults on initial load to #1 song\r\n        if (typeof state.currentSong.title === \"undefined\" && index === 0) {\r\n          handleCurrentSong(currentTrack, index, \"play\");\r\n        }\r\n\r\n        currentGenre.push(currentTrack);\r\n      });\r\n\r\n      let tracks = { ...state.tracks, [state.genre.id]: currentGenre };\r\n      setState((state) => ({ ...state, tracks }));\r\n    }\r\n  };\r\n\r\n  const handleCurrentSong = async (track, index, action) => {\r\n    let videoId;\r\n    let customPlaylist = [...state.customPlaylist];\r\n    let tracks = { ...state.tracks };\r\n    let currentGenre = [state.genre.id];\r\n\r\n    track.YouTubeId\r\n      ? (videoId = track.YouTubeId)\r\n      : (videoId = await fetchYoutube(track.artist, track.title));\r\n    // (videoId = `${state.genre.id}.${index}`);\r\n\r\n    // Check if fetch needed\r\n    if (\r\n      typeof tracks[currentGenre] !== \"undefined\" &&\r\n      tracks[currentGenre][index].YouTubeId === \"\"\r\n    ) {\r\n      tracks[currentGenre][index].YouTubeId = videoId;\r\n      setState((state) => ({ ...state, tracks }));\r\n    }\r\n    // Play current video\r\n    if (action === \"play\") {\r\n      let currentSong = {\r\n        rank: track.rank,\r\n        title: track.title,\r\n        artist: track.artist,\r\n        album: track.album,\r\n        art: track.art,\r\n        YouTubeId: videoId,\r\n        key: track.key,\r\n        availableAction: track.availableAction,\r\n        trackGenre: track.trackGenre,\r\n        trackIndex: track.trackIndex,\r\n      };\r\n\r\n      setState((state) => ({ ...state, currentSong }));\r\n    }\r\n\r\n    // Delete from custom playlist\r\n    else if (customPlaylist.includes(videoId)) {\r\n      customPlaylist = customPlaylist.filter((item) => item !== videoId);\r\n      setState((state) => ({ ...state, customPlaylist }));\r\n\r\n      tracks[currentGenre][index].availableAction = \"add\";\r\n\r\n      setState((state) => ({ ...state, tracks }));\r\n    }\r\n\r\n    // Add to custom Playlist\r\n    else if (customPlaylist.includes(videoId) === false) {\r\n      customPlaylist = [...state.customPlaylist, videoId];\r\n      setState((state) => ({ ...state, customPlaylist }));\r\n\r\n      tracks[currentGenre][index].availableAction = \"delete\";\r\n\r\n      setState((state) => ({ ...state, tracks }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isLoading === false) {\r\n      setIsLoading(true);\r\n      fetchPlaylist(state.genre);\r\n    }\r\n  }, [state.genre]);\r\n\r\n  return (\r\n    <Context.Provider value={[state, setState]}>\r\n      {props.children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport default Context;\r\n","import axios from \"axios\";\r\n     \r\nexport default axios.create({\r\n  baseURL: \"https://www.googleapis.com/customsearch/v1\"\r\n});\r\n","import { useContext, useState } from \"react\";\r\n\r\nimport Context from \"../contexts/MusicContext\";\r\n\r\nimport genius from \"../apis/genius\";\r\nimport youtube from \"../apis/youtube\";\r\n\r\nconst useMelon = () => {\r\n  const [state, setState] = useContext(Context);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Fetch Youtube Video ID for selected song\r\n  const fetchYoutube = async (artist, title) => {\r\n    var KEY = \"AIzaSyDJG4uwhqh0A4gCLmgQuDhyJM7DK57dbDk\";\r\n\r\n    const res = await youtube.get(\"/search\", {\r\n      params: {\r\n        q: `${artist} ${title}`,\r\n        part: \"snippet\",\r\n        maxResults: 1,\r\n        key: KEY,\r\n      },\r\n    });\r\n\r\n    const videoId = res.data.items[0].id.videoId;\r\n    return videoId;\r\n  };\r\n\r\n  // Fetch first 50 Youtube Video ID in a given genre\r\n  const fetchGenrePlaylist = async () => {\r\n    if (isLoading !== true) {\r\n      setIsLoading(true);\r\n\r\n      let currentSong = { ...state.currentSong };\r\n      let customPlaylist = [];\r\n      let playlistTracks = [];\r\n      let currentId = \"\";\r\n      let tracks = { ...state.tracks };\r\n      let currentGenre = [state.genre.id];\r\n\r\n      for (let i = 0; i < 10; i++) {\r\n        let currentTrack = tracks[currentGenre][i];\r\n\r\n        if (currentTrack.YouTubeId === \"\") {\r\n          currentId = await fetchYoutube(\r\n            tracks[currentGenre][i].artist,\r\n            tracks[currentGenre][i].title\r\n          );\r\n          // currentId = `${state.genre.id}.${currentTrack.trackIndex}`;\r\n        } else currentId = currentTrack.YouTubeId;\r\n\r\n        if (currentSong.YouTubeId === currentId) {\r\n          currentSong.availableAction = \"delete\";\r\n          setState((state) => ({ ...state, currentSong }));\r\n        }\r\n\r\n        // Give option to remove individual tracks form playlist\r\n        let availableAction = \"delete\";\r\n        currentTrack.availableAction = availableAction;\r\n\r\n        customPlaylist.push(currentId);\r\n        playlistTracks.push(currentTrack);\r\n      }\r\n      setIsLoading(false);\r\n\r\n      setState((state) => ({\r\n        ...state,\r\n        tracks,\r\n        customPlaylist,\r\n        playlistTracks,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const clearPlaylist = () => {\r\n    let customPlaylist = [];\r\n    let playlistTracks = [];\r\n    let tracks = { ...state.tracks };\r\n    let currentGenre = [state.genre.id];\r\n    let watchingPlaylist = false;\r\n\r\n    for (let playlist in tracks) {\r\n      for (let item in playlist) {\r\n        tracks[currentGenre][item].availableAction = \"add\";\r\n      }\r\n\r\n      setState((state) => ({\r\n        ...state,\r\n        tracks,\r\n        customPlaylist,\r\n        playlistTracks,\r\n      }));\r\n    }\r\n    setState((state) => ({ ...state, watchingPlaylist }));\r\n  };\r\n\r\n  const viewPlaylist = () => {\r\n    let watchingPlaylist = true;\r\n    setState((state) => ({ ...state, watchingPlaylist }));\r\n  };\r\n\r\n  // Update Genre onHeaderClick\r\n  const getGenre = (genre) => {\r\n    setState((state) => ({ ...state, genre }));\r\n  };\r\n\r\n  // Update currently selected song (onClick)\r\n  const handleCurrentSong = async (track, index, action) => {\r\n    let videoId;\r\n    let currentSong = { ...state.currentSong };\r\n    let customPlaylist = [...state.customPlaylist];\r\n    let playlistTracks = [...state.playlistTracks];\r\n    let tracks = { ...state.tracks };\r\n    let currentGenre = [state.genre.id];\r\n\r\n    track.YouTubeId\r\n      ? (videoId = track.YouTubeId)\r\n      : (videoId = await fetchYoutube(track.artist, track.title));\r\n        // (videoId = `${state.genre.id}.${index}`);\r\n\r\n    // Check if fetch needed\r\n    if (tracks[currentGenre][index].YouTubeId === \"\") {\r\n      tracks[currentGenre][index].YouTubeId = videoId;\r\n      setState((state) => ({ ...state, tracks }));\r\n    }\r\n    // Play current video\r\n    if (action === \"play\") {\r\n      if (window.screen.width > 767) {\r\n        let currentSong = {\r\n          rank: track.rank,\r\n          title: track.title,\r\n          artist: track.artist,\r\n          album: track.album,\r\n          art: track.art,\r\n          YouTubeId: videoId,\r\n          key: track.key,\r\n          availableAction: track.availableAction,\r\n          trackGenre: track.trackGenre,\r\n          trackIndex: track.trackIndex,\r\n        };\r\n        let watchingPlaylist = false;\r\n\r\n        setState((state) => ({ ...state, currentSong, watchingPlaylist }));\r\n      } else {\r\n        let ytLink = `https://www.youtube.com/watch?v=${videoId}`;\r\n\r\n        var win = window.open(ytLink, \"_blank\");\r\n        win.focus();\r\n      }\r\n    }\r\n\r\n    // Delete from custom playlist\r\n    else if (customPlaylist.includes(videoId)) {\r\n      if (currentSong.YouTubeId === videoId) {\r\n        currentSong.availableAction = \"add\";\r\n\r\n        setState((state) => ({ ...state, currentSong }));\r\n      }\r\n\r\n      let currentGenre = track.trackGenre;\r\n\r\n      // change from current genre to trackGenre\r\n      customPlaylist = customPlaylist.filter((item) => item !== videoId);\r\n      tracks[currentGenre][index].availableAction = \"add\";\r\n      playlistTracks = playlistTracks.filter(\r\n        (item) => item.YouTubeId !== videoId\r\n      );\r\n\r\n      setState((state) => ({\r\n        ...state,\r\n        tracks,\r\n        customPlaylist,\r\n        playlistTracks,\r\n      }));\r\n\r\n      // Return to currentSong if playlist becomes empty\r\n      if (customPlaylist.length === 0 && state.watchingPlaylist === true) {\r\n        let watchingPlaylist = false;\r\n        setState((state) => ({ ...state, watchingPlaylist }));\r\n      }\r\n    }\r\n    // Add to custom Playlist\r\n    else if (customPlaylist.includes(videoId) === false) {\r\n\r\n      if (currentSong.YouTubeId === videoId) {\r\n        currentSong.availableAction = \"delete\";\r\n        setState((state) => ({ ...state, currentSong }));\r\n      }\r\n      customPlaylist = [...state.customPlaylist, videoId];\r\n\r\n      track.availableAction = \"delete\";\r\n\r\n      playlistTracks = [...state.playlistTracks, track];\r\n      tracks[currentGenre][index].availableAction = \"delete\";\r\n\r\n      setState((state) => ({\r\n        ...state,\r\n        tracks,\r\n        customPlaylist,\r\n        playlistTracks,\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Search Genius for lyrics, open in new tab\r\n  const getLyrics = async (artist, title, album) => {\r\n    let KEY = \"AIzaSyDJG4uwhqh0A4gCLmgQuDhyJM7DK57dbDk\";\r\n    let CX = \"002575468132888478770:v1qvdfuvdlz\";\r\n\r\n    const res = await genius.get(\"?\", {\r\n      params: {\r\n        key: KEY,\r\n        cx: CX,\r\n        q: `${title} ${album}`,\r\n      },\r\n    });\r\n\r\n    let results = res.data.items;\r\n\r\n    if (typeof results !== \"undefined\") {\r\n      let lyricLink = results[0].link;\r\n\r\n      var win = window.open(lyricLink, \"_blank\");\r\n      win.focus();\r\n    } else {\r\n      return\r\n    }\r\n  };\r\n\r\n  return {\r\n    state,\r\n    headers: state.headers,\r\n    genre: state.genre,\r\n    tracks: state.tracks,\r\n    currentSong: state.currentSong,\r\n    customPlaylist: state.customPlaylist,\r\n    watchingPlaylist: state.watchingPlaylist,\r\n    isLoading,\r\n    playlistTracks: state.playlistTracks,\r\n    clearPlaylist,\r\n    viewPlaylist,\r\n    fetchYoutube,\r\n    fetchGenrePlaylist,\r\n    getGenre,\r\n    handleCurrentSong,\r\n    getLyrics,\r\n  };\r\n};\r\n\r\nexport default useMelon;\r\n","import React from \"react\";\r\nimport useMelon from \"../components/useMelon\";\r\n\r\nimport Logo from \"../assets/watermelon_04.png\";\r\n\r\nconst Header = () => {\r\n  const { getGenre } = useMelon();\r\n\r\n  let headers = [\r\n    { id: \"top100\", path: \"DM0000\", text: \"Top 100\" },\r\n    { id: \"kpop\", path: \"GN0200\", text: \"K-Pop\" },\r\n    { id: \"rap\", path: \"GN0300\", text: \"Rap/Hiphop\" },\r\n    { id: \"rb\", path: \"GN0400\", text: \"R&B\" },\r\n    { id: \"indie\", path: \"GN0500\", text: \"Indie\" },\r\n    { id: \"rock\", path: \"GN0600\", text: \"Rock\" },\r\n    { id: \"balad\", path: \"GN0100\", text: \"Balads\" },\r\n    { id: \"trot\", path: \"GN0700\", text: \"Trot\" },\r\n    { id: \"folk\", path: \"GN0800\", text: \"Folk\" },\r\n  ];\r\n\r\n  return (\r\n    <div id=\"header\" className=\"dark\">\r\n      <div className=\"logo\">\r\n        <img src={Logo} alt=\"\" />\r\n      </div>\r\n      <div className=\"genre_container\">\r\n        {headers.map((header) => (\r\n          <div\r\n            id={header.id}\r\n            className=\"genre\"\r\n            key={header.path}\r\n            onClick={() => {\r\n              getGenre(header);\r\n            }}\r\n          >\r\n            {header.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MemoizedHeader = React.memo(Header);\r\n\r\nexport default  MemoizedHeader;\r\n","import React from \"react\";\r\n\r\nconst PlaylistHeaders = () => {\r\n  return (\r\n    <div>\r\n      <section>\r\n        <div className=\"playlist_header\">\r\n          <div className=\"ranking\">Ranking</div>\r\n          <div className=\"song\">Song Title</div>\r\n          <div className=\"artist\">Artist</div>\r\n          <div className=\"album\">Album</div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaylistHeaders;\r\n ","import React from \"react\";\r\nimport useMelon from \"./useMelon\";\r\n\r\nconst YouTubePlayer = (props) => {\r\n  const { watchingPlaylist } = useMelon();\r\n  let url;\r\n  if (watchingPlaylist === true) {\r\n    url = `https://www.youtube.com/embed/VIDEO_ID?playlist=${props.playlist}`;\r\n  } else if (watchingPlaylist === false) {\r\n    url = `https://www.youtube.com/embed/${props.youtubeID}`;\r\n  } else {\r\n    return \"\";\r\n  }\r\n\r\n  return (\r\n    <div id=\"iframe_container\">\r\n      <iframe\r\n        id=\"ytplayer\"\r\n        title={props.youtubeID}\r\n        className=\"playlist\"\r\n        type=\"text/html\"\r\n        width=\"900\"\r\n        height=\"506\"\r\n        allowFullScreen=\"allowfullscreen\"\r\n        src={url}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YouTubePlayer;\r\n","import React from \"react\";\r\nimport useMelon from \"./useMelon\";\r\n\r\nconst PlaylistItem = ({ track, index }) => {\r\n  const { customPlaylist, handleCurrentSong, getLyrics } = useMelon();\r\n\r\n  let getButtonTxt = (action) => {\r\n    if (customPlaylist.length === 0) {\r\n      return \"Playlist\";\r\n    } else if (\r\n      action === \"add\" &&\r\n      customPlaylist.length > 0 &&\r\n      customPlaylist.length < 50\r\n    ) {\r\n      return \"Add\";\r\n    } else if (action === \"delete\") {\r\n      return \"Delete\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ui item row\" key={track.key}>\r\n      <div className=\"trackWrapper ui sixteen wide column grid\">\r\n        <div className=\"grid ui fourteen wide column\">\r\n          <div className=\"trackFaqs ui  floated left sixteen wide  row\">\r\n            <div className=\"rank\">{track.rank}</div>\r\n            <div className=\"art_img ui image\">\r\n              <img src={track.art} alt=\"\" />\r\n            </div>\r\n            <div className=\"song_title \">{track.title}</div>\r\n            <div className=\"artist_name\">{track.artist}</div>\r\n            <div className=\"album_name\">{track.album}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"mediaLinks two wide ui padded column\">\r\n          <div className=\"ui column\">\r\n            <div\r\n              className=\"mediaButton ui button red  centered fa-2x watchOnYT\"\r\n              style={{ display: \"inline-block\" }}\r\n              onClick={() => {\r\n                handleCurrentSong(track, index, \"play\");\r\n              }}\r\n            >\r\n              <i className=\"fab fa-youtube\"></i>\r\n              <div className=\"buttonText\">Watch</div>\r\n            </div>\r\n            <div\r\n              className=\"mediaButton ui button grey centered fa-2x watchOnYT\"\r\n              id=\"playlistButton\"\r\n              style={{ display: \"inline-block\" }}\r\n              onClick={() => {\r\n                handleCurrentSong(track, index, track.availableAction);\r\n              }}\r\n            >\r\n              <i className=\"fab fa-youtube\"></i>\r\n              <div className=\"buttonText\">\r\n                {getButtonTxt(track.availableAction)}\r\n              </div>\r\n            </div>\r\n            <div\r\n              className=\"mediaButton ui button black  centered fa-2x watchOnYT\"\r\n              id=\"lyricButton\"\r\n              style={{ display: \"inline-block\" }}\r\n              onClick={() => {\r\n                getLyrics(track.artist, track.title, track.album);\r\n              }}\r\n            >\r\n              <i className=\"fab\"></i>\r\n              <div className=\"buttonText\">Lyrics</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaylistItem;\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nimport PlaylistItem from \"./PlaylistItem\";\r\nimport useMelon from \"./useMelon\";\r\n\r\nfunction CurrentPlaylist() {\r\n  const { watchingPlaylist, playlistTracks, currentSong } = useMelon();\r\n\r\n  const renderCurrentPlaylist = () => {\r\n    let playlist = playlistTracks;\r\n\r\n    if (watchingPlaylist === false) {\r\n      return (\r\n        <div id=\"current_song\">\r\n          <PlaylistItem\r\n            track={currentSong}\r\n            index={currentSong.trackIndex}\r\n            key={currentSong.YouTubeId}\r\n          />\r\n        </div>\r\n      );\r\n    } else if (watchingPlaylist === true) {\r\n      let playlistToArray = _.toArray(playlist);\r\n      const renderedList = playlistToArray.map((track, index) => {\r\n        return (\r\n          <PlaylistItem track={track} index={track.trackIndex} key={index} />\r\n        );\r\n      });\r\n\r\n      return <div id=\"custom_playlist_container\" className=\"ui list grid\"> {renderedList} </div>;\r\n    } else {\r\n      return \"Loading...\";\r\n    }\r\n  };\r\n\r\n  return <div id=\"current_playlist_container\">{renderCurrentPlaylist()}</div>;\r\n}\r\n\r\nexport default CurrentPlaylist;\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nimport useMelon from \"./useMelon\";\r\nimport YouTubePlayer from \"./YouTubePlayer\";\r\nimport CurrentPlaylist from \"./CurrentPlaylist\";\r\n\r\nfunction NowPlaying() {\r\n  const {\r\n    state,\r\n    genre,\r\n    currentSong,\r\n    isLoading,\r\n    fetchGenrePlaylist,\r\n    customPlaylist,\r\n    clearPlaylist,\r\n    viewPlaylist,\r\n  } = useMelon();\r\n\r\n  const renderHelper = () => {\r\n    let tracksSize = _.size(state.tracks);\r\n    if (tracksSize !== 0) {\r\n      return (\r\n        <div>\r\n          <YouTubePlayer\r\n            youtubeID={currentSong.YouTubeId}\r\n            playlist={customPlaylist}\r\n          />\r\n          <div id=\"button_container\">\r\n            {renderInstantPlaylistButton()}\r\n            {renderPlayistButtons()}\r\n          </div>\r\n          <CurrentPlaylist />\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderInstantPlaylistButton = () => {\r\n    if (\r\n      _.size(state.tracks[genre.id]) > 0 &&\r\n      _.size(state.tracks[genre.id]) !== \"undefined\"\r\n    ) {\r\n      return (\r\n        <div\r\n          className=\"ui button red basic fa-2x watchOnYT\"\r\n          style={{ display: \"inline-block\" }}\r\n          onClick={() => {\r\n            fetchGenrePlaylist();\r\n          }}\r\n        >\r\n          {isLoading ? `Loading...` : `Quick ${state.genre.text} Playlist`}\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  const renderPlayistButtons = () => {\r\n    if (customPlaylist.length > 0) {\r\n      return (\r\n        <>\r\n          <div\r\n            className=\"ui button red basic fa-2x watchOnYT\"\r\n            style={{ display: \"inline-block\" }}\r\n            onClick={() => {\r\n              viewPlaylist();\r\n            }}\r\n          >\r\n            View Playlist ({customPlaylist.length})\r\n          </div>\r\n          <div\r\n            className=\"ui button red basic fa-2x watchOnYT\"\r\n            style={{ display: \"inline-block\" }}\r\n            onClick={() => {\r\n              clearPlaylist();\r\n            }}\r\n          >\r\n            Delete Playlist\r\n          </div>\r\n        </>\r\n      );\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  return <>{renderHelper()}</>;\r\n}\r\n\r\nconst MemoizedNowPlaying = React.memo(NowPlaying);\r\nexport default MemoizedNowPlaying;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  let yt = \"https://www.youtube.com/t/terms\";\r\n  let google = \"https://policies.google.com/privacy\";\r\n\r\n  let buttonHelper = (link) => {\r\n    let win = window.open(link, \"_blank\");\r\n    win.focus();\r\n  };\r\n\r\n  return (\r\n    <div id=\"footer\">\r\n      <div>WaterMelon uses YouTube API Services</div>\r\n      <div id=\"policyButtons\">\r\n        <div onClick={() => buttonHelper(google)}>Google Privacy Policy</div>\r\n        <span id=\"divide\">    |    </span>\r\n        <div onClick={() => buttonHelper(yt)}> YouTube ToS</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nconst spinner = () => {\r\n  return (\r\n    <>\r\n      <div id=\"playlist_container\">\r\n        <div className=\"fa-3x\">\r\n          <i className=\"fas fa-circle-notch fa-spin\"></i>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default spinner;\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport useMelon from \"./useMelon\";\r\nimport PlaylistItem from \"./PlaylistItem\";\r\nimport Spinner from \"./spinner\";\r\n\r\nconst Playlist = () => {\r\n  const {\r\n    isLoading,\r\n    genre,\r\n    tracks,\r\n  } = useMelon();\r\n\r\n  const playlistRendor = () => {\r\n    let currentList = tracks[genre.id];\r\n\r\n    if (isLoading || !currentList) {\r\n      return <Spinner />;\r\n    } else {\r\n      currentList = _.toArray(currentList);\r\n      const renderedList = currentList.map((track, index) => {\r\n        return <PlaylistItem track={track} index={index} key={index} />;\r\n      });\r\n      return (\r\n        <>\r\n          {renderedList}\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div id=\"playlist_container\" className=\"ui relaxed centered list grid\">{playlistRendor()}</div>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\nconst MemoizedPlaylist = React.memo(Playlist);\r\n\r\nexport default MemoizedPlaylist;\r\n","import React from \"react\";\nimport Header from \"./Header\";\nimport PlaylistHeaders from \"./PlaylistHeaders\";\nimport NowPlaying from \"./NowPlaying\";\nimport Footer from \"./Footer\"\nimport Playlist from \"./Playlist\";\n\nimport { MusicProvider } from \"../contexts/MusicContext\";\n\nconst App = () => {\n  return (\n    <div id=\"main_container\" className=\"App ui container\">\n      <MusicProvider>\n        <Header />\n        <div className=\"ui grid equal width\">\n          <div className=\"ui row centered \">\n            <div className=\"six wide column mobilePlaylist\" id=\"mobile\">\n              <PlaylistHeaders />\n              <Playlist />\n            </div>\n            <div className=\"six wide column middle nowPlaying\">\n              <NowPlaying />\n            </div>\n          </div>\n        </div>\n      </MusicProvider>\n      <Footer/>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}